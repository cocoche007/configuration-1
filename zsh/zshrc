# /////////////////////////////////////////////////////////////////////////////
#                           Behaviour configuration
# /////////////////////////////////////////////////////////////////////////////
# Completion
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select
zstyle :compinstall filename "$HOME/.zshrc"
autoload -Uz compinit
compinit
setopt completealiases

# Colors
autoload -U colors && colors

# History
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt HIST_IGNORE_DUPS

# Load aliases
source  "$HOME/.aliases"

# /////////////////////////////////////////////////////////////////////////////
#                               Export some env vars
# /////////////////////////////////////////////////////////////////////////////
export EDITOR=vim
# Set manpage to vim
export MANPAGER="/bin/sh -c \"sed -e 's/.$(echo -e '\010')//g' \
                                | vim -R -c 'set ft=man nomod nolist' -c 'set nonu' -\""
# Set general path
path=($path $HOME/.bin/ /opt/)

# Load path to zsh functions
fpath=($fpath $HOME/.zsh/func)
typeset -U fpath

# /////////////////////////////////////////////////////////////////////////////
#                               Prompt theme
# /////////////////////////////////////////////////////////////////////////////
setopt promptsubst
autoload -U promptinit
promptinit
prompt yapbreak

# /////////////////////////////////////////////////////////////////////////////
#                               Key binding
# /////////////////////////////////////////////////////////////////////////////
#bindkey -v                     # Key binding vim mode
typeset -A key
key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi


# /////////////////////////////////////////////////////////////////////////////
#                           User functions
# /////////////////////////////////////////////////////////////////////////////
# Dirstack
setopt autopushd pushdsilent pushdtohome
setopt pushdignoredups
setopt pushdminus
